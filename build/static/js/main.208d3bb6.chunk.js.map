{"version":3,"sources":["components/Table.js","components/ReportersDropdown.js","containers/GetReporters.js","App.js","serviceWorker.js","index.js"],"names":["Table","props","activitiesGrouped","mystring","state","cvsString","date","this","activity","isContained","startDate","activities","i","length","newActivities","summary","actualHours","parseFloat","dateIsIn","j","push","Date","toLocaleDateString","timeZone","buidNewArray","download","toString","id","class","map","data","React","Component","ReportersDropdown","value","isLoading","handleChange","bind","handleSubmit","event","setState","target","console","log","componentDidMount","alert","preventDefault","userId","fetch","then","response","json","reporters","onChange","href","reporter","name","role","GetReporters","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.208d3bb6.chunk.js","sourcesContent":["import React from 'react';\r\nimport { CSVLink } from \"react-csv\";\r\n\r\nclass Table extends React.Component{\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      cvsString:''\r\n    };\r\n  }\r\n activitiesGrouped = [];\r\n mystring='';\r\n\r\n \r\n dateIsIn(date) {\r\n for(var activity of this.activitiesGrouped)\r\n    var isContained = false;\r\n    if(activity.startDate === date){\r\n      isContained = true;\r\n     }\r\n   return(isContained)\r\n }\r\n\r\n\r\nbuidNewArray(activities){\r\n  for (var i = 0; i < activities.length; i++){\r\n    var newActivities = [];\r\n    newActivities.summary = activities[i].summary;\r\n    newActivities.actualHours = parseFloat(activities[i].actualHours);\r\n    newActivities.startDate = activities[i].startDate;\r\n    if(this.activitiesGrouped.length === 0 || !this.dateIsIn(activities[i].startDate)){\r\n      for (var j = i+1; j < activities.length; j++){       \r\n        if (activities[j].startDate === activities[i].startDate) {\r\n          //var newActivities = [];\r\n          newActivities.summary += '\\n' + activities[j].summary;       \r\n          newActivities.actualHours += parseFloat(activities[j].actualHours);\r\n          newActivities.startDate = activities[j].startDate;\r\n        }\r\n      }\r\n      newActivities.summary = '\"'+newActivities.summary+'\"';\r\n      this.activitiesGrouped.push(newActivities);\r\n    }\r\n  }\r\n  for (var i = 0; i < this.activitiesGrouped.length; i++){\r\n   this.mystring += new Date(this.activitiesGrouped[i].startDate).toLocaleDateString('en-US', {timeZone: 'UTC'}) + ',' + \"Desarrollo\" + ',' +  ',' +\r\n              this.activitiesGrouped[i].summary + ','+\r\n              this.activitiesGrouped[i].actualHours + '\\r\\n'\r\n  }\r\n}\r\n  render(){\r\n     const{activities} = this.props\r\n     if(activities.length > 0 ){\r\n      this.buidNewArray(activities)\r\n      const download = this.mystring.toString();\r\n      return(\r\n        <div>\r\n        <table  id=\"activities\" class=\"table table-striped table-hover table-sm\">\r\n        <thead class=\"thead-dark\">\r\n          <tr>\r\n            <th>Fecha</th>\r\n            <th>Actividad</th>\r\n            <th>Horas</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n        {\r\n          this.activitiesGrouped.map(function (activity){\r\n            return(\r\n              <tr>\r\n                <td>{activity.startDate}</td>\r\n                <td>{activity.summary}</td>\r\n                <td>{activity.actualHours}</td>\r\n              </tr> \r\n            )\r\n          })\r\n        }\r\n        </tbody>\r\n      </table>\r\n      <CSVLink data={download}>Download Report</CSVLink>\r\n      </div>\r\n      )\r\n    } else { \r\n       return (<div></div>)\r\n    }\r\n  }\r\n}\r\n  \r\n  export default Table;","import React from 'react';\r\nimport Table from './Table';\r\n\r\nclass ReportersDropdown extends React.Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n        value: '', \r\n        activities:[],\r\n        isLoading: true\r\n    };\r\n    \r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n      }\r\n    \r\n      async handleChange(event) {\r\n        await this.setState({value: event.target.value}, ()=>{console.log('empleado:' + this.state.value)});\r\n         this.componentDidMount(this.state.value);\r\n      }\r\n\r\n       handleSubmit(event) {\r\n        alert('A name was submitted: ' + this.state.value);\r\n        event.preventDefault();\r\n      }\r\n\r\n      \r\n      componentDidMount(userId) {\r\n          console.log('Hola' + this.state.value);\r\n        if(this.state.value !== ''){\r\n            fetch('https://ulfix.backlog.com/api/v2/issues?apiKey=1H0ln17z0cb2tGznBxsZRwPbgZldx8WM6LHSS0ngqy451p1kM7KtwmHqvWvQalEC&projectId[]=30508&assigneeId[]='+userId+'&startDateSince=2020-08-01&startDateUntil=2020-08-31&sort=startDate&order=asc&count=100')\r\n            .then(response => response.json())\r\n            .then(activities => this.setState({activities})) \r\n        }  \r\n      }\r\n\r\n  render(){\r\n     const{reporters} = this.props;\r\n     return(\r\n    <div>\r\n        <div class=\"row\">\r\n            <div class=\"col\">\r\n                <div class=\"form-group\">\r\n                    <select class=\"form-control\" id=\"exampleFormControlSelect1\" onChange={this.handleChange}>\r\n                        <option href=\"#\" value=''>Elige un mes</option>\r\n                        <option href=\"#\" value=''>Enero</option>\r\n                        <option href=\"#\" value=''>Febrero</option>\r\n                        <option href=\"#\" value=''>Marzo</option>\r\n                    </select>\r\n                </div>\r\n            </div>\r\n            <div class=\"col\">\r\n                <div class=\"form-group\">\r\n                    <select class=\"form-control\" id=\"exampleFormControlSelect1\" onChange={this.handleChange}>\r\n                        <option href=\"#\" value=''>Selecciona un Empleado</option>\r\n                    {\r\n                        reporters.map(function (reporter){\r\n                        return(\r\n                            <option id={reporter.name} href=\"#\" value={reporter.id}>{reporter.name}</option>\r\n                        )\r\n                        })\r\n                    }\r\n                    </select>\r\n                </div>\r\n            </div>\r\n            <div class=\"col\">\r\n                <a href=\"#\" class=\"btn btn-secondary active\" role=\"button\">Descarga Reporte</a>\r\n            </div>\r\n        </div>\r\n        <div class=\"row\">\r\n                <div class=\"col\">\r\n                    {\r\n                        <Table activities ={this.state.activities} />\r\n                    }\r\n                </div>   \r\n        </div>\r\n    </div>     \r\n\r\n     )\r\n  }\r\n}\r\n  \r\n  export default ReportersDropdown;","import React from 'react';\r\nimport ReportersDropdown from '../components/ReportersDropdown.js';\r\n\r\n\r\nclass GetReporters extends React.Component{\r\n    state = {\r\n        reporters:[]\r\n    }\r\n    componentDidMount() {\r\n        fetch('https://ulfix.backlog.com/api/v2/projects/30508/users?apiKey=1H0ln17z0cb2tGznBxsZRwPbgZldx8WM6LHSS0ngqy451p1kM7KtwmHqvWvQalEC')\r\n        .then(response => response.json())\r\n        .then(reporters => this.setState({reporters}))\r\n      }\r\n      render() {\r\n        return(\r\n            <ReportersDropdown reporters = {this.state.reporters} />  \r\n        )       \r\n    }\r\n}\r\n\r\nexport default GetReporters;","import React, { Component } from 'react';\nimport GetReporters from './containers/GetReporters.js'\n\nclass App extends Component {\n  render(){\n    return(\n      <div>\n        <div>\n          <div class=\"container\" id='reporters'>\n            <GetReporters />\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport $ from 'jquery';\nimport Popper from 'popper.js';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}